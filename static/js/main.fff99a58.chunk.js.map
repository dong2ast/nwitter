{"version":3,"sources":["fBase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","nweetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fff99a58.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\n\r\n// env파일을 따로 설정하고 gitignore에 할당함으로써 직접적인 노출 방지 = 보안\r\n//하지만 app 컴파일 과정에서는 어차피 이 값들이 들어가게 됨 (깃헙용)\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCe1muflX6BYK22zMhVLeURgRpaxskLyDM\",\r\n    authDomain: \"nwitter-15671.firebaseapp.com\",\r\n    projectId: \"nwitter-15671\",\r\n    storageBucket: \"nwitter-15671.appspot.com\",\r\n    messagingSenderId: \"518981940816\",\r\n    appId: \"1:518981940816:web:4f69d44a1019c010648355\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { authService } from \"fBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst inputStyles = {};\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const onChange = (event) => { // 입력된 value값이 event로 넘겨짐\r\n        const {target: {name, value}} = event; //target의 name과 value값을 각각 변수에 저장\r\n        if(name ===\"email\"){\r\n            setEmail(value); // email값 실시간 변경\r\n        } else if(name===\"password\"){\r\n            setPassword(value); //password 값 실시간 변경\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (event) => { // 비동기(다른 코드 실행 x)\r\n      event.preventDefault(); //submimt제출 할때마다 페이지가 새로고침 되는걸 방지 (기본은 새로고침)\r\n      try{\r\n        let data\r\n        if (newAccount) { //새로운 계정이면\r\n          data = await authService.createUserWithEmailAndPassword(email, password);\r\n        } else {\r\n          data = await authService.signInWithEmailAndPassword(email, password);\r\n        }\r\n        console.log(data);\r\n      } catch(error){\r\n        setError(error.message);\r\n      }\r\n    }\r\n\r\n    const toggleAccount = () => {\r\n      setNewAccount((prev) => !prev)\r\n    }\r\n    return (\r\n    <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n              <input\r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"Email\" // 필드에 아무것도 없을 때 보여지는 글\r\n                required // 반드시 적어야함\r\n                value={email} // 필드 초기값 (보여지는 부분), 초기 email(state)에는 아무것도 없음\r\n                onChange={onChange} // 이벤트 발생\r\n                className=\"authInput\"\r\n              />\r\n              <input\r\n                name=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                value={password}\r\n                className=\"authInput\"\r\n                onChange={onChange}\r\n              />\r\n              <input type=\"submit\" className=\"authInput authSubmit\" value={newAccount ? \"Create New Account\" : \"Log In\"} />\r\n              {error && <span className=\"authError\">{error}</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"Log in\" : \"Create Account\"}</span>\r\n    </>\r\n    )    \r\n}\r\n\r\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance} from \"fBase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n//리액트 훅은 어떠한 변수가 바뀔때마다 html파일을 새로 리로드 하는게 아니라\r\n//즉석에서 변수 값을 바꾸기 위해 만들어짐, 함수형에서 상태관리 가능/ 속도 up\r\n\r\nconst Auth = () => {\r\n    const onSocialClick = async (event) => {\r\n      const {\r\n        target: { name },\r\n      } = event;\r\n      let provider;\r\n      if(name === \"google\"){\r\n        provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n      } else if (name === \"github\"){\r\n        provider = new firebaseInstance.auth.GithubAuthProvider();\r\n      }\r\n      await authService.signInWithPopup(provider);\r\n    }\r\n\r\n    return (\r\n      <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n        <AuthForm />\r\n        <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\r\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n\r\n","import { dbService, storageService } from \"fBase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false); //edit 상태 확인\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text); //새로운 nweet\r\n\r\n  const onDeleteClick = async () => { //delete버튼 클릭시 실행\r\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\")\r\n    if(ok){\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete(); //url을 이용해 사진 참조 후 삭제\r\n    }\r\n  }\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev) //edit 상태 변환 토글\r\n\r\n  const editOnchange =(event) => { //value가 변할 때 onChange이벤트\r\n    const {target: {value}} = event;\r\n    setNewNweet(value);\r\n  }\r\n\r\n  const onSubmit = async (event) =>{ //nweet 업데이트시 실행\r\n    event.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n          text: newNweet, \r\n    });\r\n    setNewNweet(\"\");\r\n    setEditing(false);\r\n  }\r\n  return (\r\n    <div className=\"nweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              autoFocus\r\n              onChange={editOnchange}\r\n              className=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n          {isOwner && (\r\n            <div class=\"nweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;","import { dbService, storageService } from \"fBase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4} from \"uuid\"; //사진에 랜덤한 아이디를 부여\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({userObj}) => {\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (nweet === \"\") {\r\n          return;\r\n        }\r\n        let attachmentUrl =\"\";\r\n        if(attachment != \"\") {\r\n          const attachmentRef = storageService\r\n          .ref()\r\n          .child(`${userObj.uid}/${uuidv4()}`); //child를 만들고 이를 참조하는 ref를 만듦\r\n          const response = await attachmentRef.putString(attachment, \"data_url\"); //attachment라는 dataurl을 string형태로 변환하여 ref에 upload\r\n          //response는 upload한 상태의 bucket의 대한 정보 반환\r\n          attachmentUrl = await response.ref.getDownloadURL(); //해당 정보에서 사진 url 추출\r\n        }\r\n        const nweetObj = {\r\n          text: nweet, \r\n          createdAt: Date.now(), // key: value\r\n          creatorId: userObj.uid,\r\n          attachmentUrl,\r\n        };\r\n        await dbService.collection(\"nweets\").add(nweetObj);//promise를 await하는 경우 값을 반환받을때까지 async함수 중단\r\n        //nweets에 doc을 추가\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n    const onChange = (event) => {\r\n        const {\r\n          target: { value },\r\n        } = event;\r\n        setNweet(value);\r\n    }\r\n    const onFileChange = (event) => { //이미지 업로드 이벤트(파일이 변화했을 때)\r\n        const {target: {files}} = event;\r\n        const theFile = files[0]; //파일 배열의 0번칸에 업로드 파일이 있음(1)\r\n        const reader = new FileReader(); //파일리더 객체를 만들어서(2)\r\n        reader.onloadend = (finishedEvent) => { //eventlistener를 리더 객체에 추가\r\n          const {currentTarget : {result}} = finishedEvent; //url 형태로 result 추출(4)\r\n          setAttachment(result); //로드가 끝나면 result를 attachment로 설정(5)\r\n        };\r\n        if (Boolean(theFile)) {\r\n          reader.readAsDataURL(theFile);\r\n        }\r\n        //thefile url을 이용해 데이터를 읽음(3)\r\n        //그 다음 url 주소로 이미지를 띄우는 것\r\n      }\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n    return (\r\n      <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n        <input\r\n          id=\"attach-file\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={onFileChange}\r\n          style={{\r\n            opacity: 0,\r\n          }}\r\n        />\r\n        {attachment && (\r\n          <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n              <span>Remove</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default NweetFactory;","import Nweet from \"components/Nweet\";\r\nimport { dbService} from \"fBase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ( {userObj}) => {\r\n    const [nweets, setNweets] = useState([]);\r\n    \r\n    useEffect(() => {\r\n      dbService.collection(\"nweets\").orderBy(\"createdAt\",\"desc\").onSnapshot(snapshot => {\r\n        const nweetArray = snapshot.docs.map(doc => ({ // snapsho은 query와 같은 느낌\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }))\r\n        setNweets(nweetArray);\r\n      })\r\n    }, []);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <NweetFactory userObj={userObj} />\r\n        <div style={{ marginTop: 30 }}>\r\n          {nweets.map((nweet) => ( //nweet목록들 각각 매핑해서 만듦\r\n            <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId===userObj.uid}/>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Home;","import { authService} from \"fBase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ( {refreshUser, userObj} ) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n      authService.signOut();\r\n      history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        const {\r\n            target: {value},\r\n        } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {//변한경우에만 변경\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            });\r\n            refreshUser(); //변경된 이름 저장 후 새로고침\r\n        }\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={onSubmit} className=\"profileForm\">\r\n          <input\r\n            type=\"text\"\r\n            autoFocus\r\n            placeholder=\"Display name\"\r\n            value={newDisplayName}\r\n            onChange={onChange}\r\n            className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n          />\r\n        </form>\r\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { Link  } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n      <li>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link\r\n          to=\"/profile\"\r\n          style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}의 Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n    return (\r\n      <Router>\r\n        {isLoggedIn && <Navigation userObj={userObj} />}\r\n        <Switch>\r\n          {isLoggedIn ? (\r\n            <div\r\n              style={{\r\n                maxWidth: 890,\r\n                width: \"100%\",\r\n                margin: \"0 auto\",\r\n                marginTop: 80,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Route exact path=\"/\">\r\n                <Home userObj={userObj} />\r\n              </Route>\r\n              <Route exact path=\"/profile\">\r\n                <Profile refreshUser={refreshUser} userObj={userObj} />\r\n              </Route>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <Route exact path=\"/\">\r\n                <Auth />\r\n              </Route>\r\n              {/* 로그아웃 되면 이 조건문이 실행, 때문에 /가 아닌 경로는 /로 리디렉션 */}\r\n            </>\r\n          )}\r\n        </Switch>\r\n      </Router>\r\n    );\r\n};\r\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport {authService} from \"fBase\";\n\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => { //mount, update 됐을 때 아래의 함수 실행(리스너동록개념)\n      authService.onAuthStateChanged((user) => {\n        if(user){\n          setUserObj({ //Obj의 일부만 가져옴, 너무 크면 업뎃시 리액트 먹통\n            displayName: user.displayName,\n            uid: user.uid,\n            updateProfile: (args => {\n              user.updateProfile(args)\n            }),\n          });\n        } else {\n          setUserObj(null);\n        }\n        setInit(true)\n      })\n      //auth 상태가 변화하는 것을 알아차림, eventListener\n  }, []) //아마 끝나면 refresh되는듯?\n  const refreshUser =() => { //이 함수를 호출하면\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName, //현재 유저의 이름\n      uid: user.uid, //현재 유저의 아이디\n      updateProfile: (args => { //현재 유저의 upPro함수가 Obj에 업뎃\n        user.updateProfile(args)\n      }),\n    });\n  }\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}